import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import javafx.util.Pair;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dell
 */
public class NewJFrame extends javax.swing.JFrame{

    /**
     * Creates new form NewJFrame
     */
    int no_of_fd,no_of_attr;
    DefaultTableModel model;
    @SuppressWarnings("UseOfObsoleteCollectionType")
    Vector<Set<Character>> fd;
    @SuppressWarnings("UseOfObsoleteCollectionType")
    public static Set<Character> sm= new HashSet<>();
    public static int z,min_NF=4;
    public static Vector<Set<Character>> super_keys;
    public NewJFrame() {
        this.fd = new Vector<>();
        initComponents();        
    }    
    
    public static Set<Set<Character>> powerSet(Set<Character> ints)
    {		
	List<Character> S = new ArrayList<>(ints);
	long N = (long) Math.pow(2, S.size());
	Set<Set<Character>> result = new HashSet<>();
	for (int i = 0; i < N; i++)
	{
            Set<Character> set = new HashSet<>();		
            for (int j = 0; j < S.size(); j++)							
		if ((i & (1 << j)) != 0)
                    set.add(S.get(j));			
            result.add(set);
	}
	return result;		
    }
    
    public static boolean contained(Set<Character> ex1,Set<Character> ex2)
    { 
	boolean flag2=true;
	for(Character ch : ex1)
	{
            if(ex2.contains(ch)) {
                           } 
            else
                return false;
	}
	return flag2;		
    }
    
    public static boolean contained_even_one(Set<Character> ex1,Set<Character> ex2)
    {
        boolean flag2=false;
        if (ex1.stream().anyMatch((ch) -> (ex2.contains(ch)))) {
            return true;
        }	
        return flag2;		
    }
    
    public static Set<Set<Character>> powerSet1(Set<Character> ints)
    {		
	List<Character> S = new ArrayList<>(ints);
	long N = (long) Math.pow(2, S.size());
	Set<Set<Character>> result = new HashSet<>();
	for (int i = 1; i < N; i++)
	{
            Set<Character> set = new HashSet<>();		
            for (int j = 0; j < S.size(); j++)							
		if ((i & (1 << j)) != 0)
                    set.add(S.get(j));			
            result.add(set);
	}
	return result;
    }
    
    public static Set<Character> recurse(Set<Set<Character>> set1 , Set<Character> accessible, Vector<Set<Character>> fd)
	{
            if(sm.size()==z)
		return accessible;
            if(accessible.size()==z)
    		return accessible;		
            if(set1.size()==1)
            {
            	for(Set<Character> set2 : set1)
		{
                    accessible.addAll(set2);
                    return accessible;
		}
            }
            sm.addAll(accessible);
            int prev=accessible.size();		
            set1.stream().forEach((set2) -> {
                for(int i = 0;i < fd.size(); i+=2)
                {
                    Set<Character> left = fd.elementAt(i);
                    Set<Character> right = fd.elementAt(i+1);
                    boolean flag1=contained(set2,accessible);
                    if(left.equals(set2) && flag1)
                        accessible.addAll(right);							
                }
            });
            int after=accessible.size();
            if(after==prev)
                return accessible;		
            else
                return recurse(powerSet(accessible),accessible,fd);
	}
    
    public static Pair<Integer,Integer> check(int zz,Set<Character> x,Set<Character> y,Set<Character> pk,Set<Character>npk)
	{
		int nf=1;
		if(super_keys.contains(x))
			nf=4;
		else
		{
			if(!contained(x,pk) || contained_even_one(y,pk))
			{
				nf=2;
				if(contained_even_one(y,pk))
					nf=3;
			}
		}				
		return new Pair<>(zz,nf);
	}
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "Convert2Lambda"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jTextField4 = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Refresh labels");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter number of functional dependencies");

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("                                                                WELCOME TO MODULE 1!");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jLabel2.setText("Enter number of attributes ");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 12)); // NOI18N
        jLabel3.setText("         Table        ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel4.setText("Enter attributes labels");

        jButton2.setText("Add Row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane5.setViewportView(jTextArea3);

        jLabel6.setText("Enter functional dependencies");

        jButton4.setText("Enter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane6.setViewportView(jTextArea4);

        jLabel7.setText("Essential attributes");

        jLabel8.setText("Non Essential Attributes");

        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jScrollPane8.setViewportView(jTextArea6);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane7.setViewportView(jTextArea5);

        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jScrollPane9.setViewportView(jTextArea7);

        jLabel9.setText("Super Keys");

        jLabel10.setText("Candidate keys aka minimal Super Keys ");

        jLabel11.setText("Prime Attributes");

        jLabel12.setText("Normal form of the relation");

        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jScrollPane10.setViewportView(jTextArea8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(231, 231, 231)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(250, 250, 250)
                            .addComponent(jLabel3))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                                .addComponent(jScrollPane3)
                                .addComponent(jScrollPane4)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                            .addGap(118, 118, 118)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField1)
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton2)
                            .addGap(211, 211, 211)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(62, 62, 62))
                                    .addComponent(jScrollPane8)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane9)
                                    .addComponent(jTextField4))))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(33, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(jScrollPane7))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("UnusedAssignment")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        no_of_fd = Integer.parseInt(jTextField1.getText());
        System.out.println(no_of_fd);
        no_of_attr = Integer.parseInt(jTextField2.getText());
        z=no_of_attr;
        System.out.println(no_of_attr);
        @SuppressWarnings("UnusedAssignment")
        String[] names;
        names = new String[no_of_attr];
        names = jTextArea1.getText().split("\\n");
        @SuppressWarnings("UnusedAssignment")
        Object[] columns= new Object[no_of_attr];
        columns=names;
        model = new DefaultTableModel();
        model.setColumnIdentifiers(columns);        
        jTable2.setModel(model);  
        //jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] names = jTextArea2.getText().split("\\n");
        model.addRow(names);
        jTable2.setModel(model);
        jTextArea2.setText("");        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String[] txt;
        txt = jTextArea3.getText().split("-->");
        for(int i=0;i<((2*no_of_fd)-1);i+=2)
        {
            Set<Character> left;
            left = new HashSet<>();
            for(int j=0;j<txt[i].length();j++)
                left.add(txt[i].charAt(j));
            Set<Character> right;
            right = new HashSet<>();
            for(int j=0;j<txt[i+1].length();j++)
                right.add(txt[i+1].charAt(j));
            fd.add(left);
            fd.add(right);
        }
        jTextArea3.setText("");
        for(int i=0;i<fd.size();i+=2)        
            jTextArea3.append(fd.get(i)+"-->"+fd.get(i+1)+"\n");      
        Set<Character> non_essential,essential;
        non_essential = new HashSet<>(no_of_attr);
        essential = new HashSet<>(no_of_attr);
	for(int i=65;i<65+no_of_attr;i++)	
            essential.add((char)i);				
	for (int i = 0; i < fd.size(); i+=2)
	{            	
	    Set<Character> right = fd.get(i+1);		        
	    non_essential.addAll(right);          	  
        }	 
        essential.removeAll(non_essential); 
        jTextArea4.append(essential.toString());
        jTextArea6.append(non_essential.toString());
        
        Set<Set<Character>> result;
        if(essential.isEmpty())
            result = powerSet1(non_essential);
        else
            result = powerSet(non_essential);
        result.stream().forEach((Set<Character> set) -> {
            set.addAll(essential);		
        });
        result.stream().forEach((set) -> {
            System.out.println(set);
        });
	Vector<Set<Character>> target = new Vector<>(result.size()*2);	
	System.out.println("Target sets");	
        result.stream().map((set) -> {
            target.add(set);
            return set;
        }).map((Set<Character> set) -> {
            Set<Character> accessible = new HashSet<>();
            accessible.addAll(set);
            return accessible;
        }).map((Set<Character> accessible) -> {
            target.add(recurse(powerSet(accessible),accessible,fd));
            return accessible;
        }).forEach((Set<Character> _item) -> {
            sm.clear();
        });
	target.forEach((xx) -> System.out.println(xx));		
	System.out.println("Super keys");
	int min_key_size=999999;
	super_keys = new Vector<>();
	for(int i=0;i<target.size();i+=2)
	{
            Set<Character> spr= target.elementAt(i);
            Set<Character> spr1= target.elementAt(i+1);
            if(spr1.size()==no_of_attr)
            {
		jTextArea5.append(spr.toString()+"\n");
		if(min_key_size>spr.size())
                    min_key_size=spr.size();
		super_keys.add(spr);
            }
	}
        
        
        System.out.println("Candidate keys aka minimal super key");

		Vector<Set<Character> > candidate_keys = new Vector<>();

		Set<Character> prime_attributes = new HashSet<>();
		for(int i=0;i<super_keys.size();i++)
		{
			Set<Character> spr= super_keys.elementAt(i);				
			if(spr.size()==min_key_size)
			{				
				candidate_keys.add(spr);
				prime_attributes.addAll(spr);
			}			
		}
		for(int i=0;i<super_keys.size();i++)
		{
			Set<Character> sup = super_keys.elementAt(i);
			boolean flag= false;
			for(int j=0;j<candidate_keys.size();j++)
			{
				Set<Character> can= candidate_keys.elementAt(j);
				if(contained_even_one(sup,can))
				{					
					flag=true;
					break;				
				}
			}
			if(!flag)			
				candidate_keys.add(sup);			
		}
		for(int i=0;i<candidate_keys.size();i++)
		{
			Set<Character> can= candidate_keys.elementAt(i);				
			System.out.println(can);
                        jTextArea7.append(can.toString()+"\n");
			prime_attributes.addAll(can);
		}
		Set<Character> non_prime_attributes = new HashSet<>();
		for(int i=65;i<65+z;i++)	
			non_prime_attributes.add((char)i);
		non_prime_attributes.removeAll(prime_attributes);
		System.out.println("prime_attributes: "+ prime_attributes);
                jTextArea8.append(prime_attributes.toString());
		System.out.println("non_prime_attributes: "+ non_prime_attributes);
        
                
        Vector<Pair<Integer,Integer>> highest_nf = new Vector<>();
		for(int i=0;i<fd.size();i+=2)//x->y
		{
			Set<Character> x=fd.elementAt(i);
			Set<Character> y=fd.elementAt(i+1);
			highest_nf.add(check(((i+1)/2)+1,x,y,prime_attributes,non_prime_attributes));
		}
                jTextArea3.setText("");
		for(int i=0;i<fd.size();i+=2)
		{
			Set<Character> fd123 = fd.elementAt(i);
			Set<Character> fd1234 = fd.elementAt(i+1);
			Pair<Integer,Integer> curr = highest_nf.elementAt(((i+1)/2));
			System.out.println(curr.getKey()+ ". " + fd123 + " ----> " +fd1234+ " satisfies " + curr.getValue());
                        jTextArea3.append(curr.getKey()+ ". " + fd123 + " --> " +fd1234+ " satisfies " + curr.getValue()+"\n");
			if(min_NF>curr.getValue())
				min_NF=curr.getValue();			
		}
        if(min_NF==4)
            jTextField4.setText("BCNF");
        else if(min_NF==3)
            jTextField4.setText("3NF");
        else if(min_NF==2)
            jTextField4.setText("2NF");
        else
            jTextField4.setText("1NF");
        if(min_NF==4)
            JOptionPane.showMessageDialog(null,"The relation is already in BCNF");
        else
        {
            if(min_NF==1)
            {
                for(int i=0;i<fd.size();i+=2)
                {
                    Set<Character> fd123 = fd.elementAt(i);
                    Set<Character> fd1234 = fd.elementAt(i+1);                    
                    Pair<Integer,Integer> curr = highest_nf.elementAt(((i+1)/2));
                    if(curr.getValue()==1)                    
                    {
                        DefaultTableModel new_model = new DefaultTableModel();                        
                        Set<Character> all = new HashSet<>();
                        Set<Character> set = new HashSet<>();                        
                        set.addAll(fd123);
                        set.addAll(fd1234);
                        for(int j=65;j<(65+z);j++)
                            all.add((char)j);
                        all.removeAll(set);
                        System.out.println(all);                                                        
                        int zs=jTable2.getModel().getRowCount();
                        Object[][] row = new Object[zs][set.size()];                        
                        int cnt=0;
                        int[] all1 = new int[set.size()];
                        Object[] hello= new Object[set.size()];
                        for(Character ch:set){                        
                            hello[cnt]=ch+"";
                            all1[cnt]=ch - 65;
                            System.out.println(all1[cnt++]);
                        }                        
                        for(int j=0;j<model.getRowCount();j++)
                        {
                            for(int k=0;k<set.size();k++)
                            {
                                row[j][k]=model.getValueAt(j,all1[k]);
                                System.out.print(row[j][k]+" ");
                            }
                            System.out.println();
                        }                        
                        new_model.setDataVector(row,hello);
                        NewJFrame1 nj1 = new NewJFrame1(new_model);
                        nj1.setVisible(true);                        
                    }
                }
            }
            else if(min_NF==2)
            {
                for(int i=0;i<fd.size();i+=2)
                {
                    Set<Character> fd123 = fd.elementAt(i);
                    Set<Character> fd1234 = fd.elementAt(i+1);                    
                    Pair<Integer,Integer> curr = highest_nf.elementAt(((i+1)/2));
                    if(curr.getValue()==2)                    
                    {
                        DefaultTableModel new_model = new DefaultTableModel();                        
                        Set<Character> all = new HashSet<>();
                        Set<Character> set = new HashSet<>();                        
                        set.addAll(fd123);
                        set.addAll(fd1234);
                        for(int j=65;j<(65+z);j++)
                            all.add((char)j);
                        all.removeAll(set);
                        System.out.println(all);                                                        
                        int zs=jTable2.getModel().getRowCount();
                        Object[][] row = new Object[zs][set.size()];                        
                        int cnt=0;
                        int[] all1 = new int[set.size()];
                        Object[] hello= new Object[set.size()];
                        for(Character ch:set){                        
                            hello[cnt]=ch+"";
                            all1[cnt]=ch - 65;
                            System.out.println(all1[cnt++]);
                        }                        
                        for(int j=0;j<model.getRowCount();j++)
                        {
                            for(int k=0;k<set.size();k++)
                            {
                                row[j][k]=model.getValueAt(j,all1[k]);
                                System.out.print(row[j][k]+" ");
                            }
                            System.out.println();
                        }                        
                        new_model.setDataVector(row,hello);                        
                        NewJFrame1 nj1 = new NewJFrame1(new_model);
                        nj1.setVisible(true);                        
                    }
                }
            }
            else
            {
                for(int i=0;i<fd.size();i+=2)
                {
                    Set<Character> fd123 = fd.elementAt(i);
                    Set<Character> fd1234 = fd.elementAt(i+1);                    
                    Pair<Integer,Integer> curr = highest_nf.elementAt(((i+1)/2));
                    if(curr.getValue()==3)                    
                    {
                        DefaultTableModel new_model = new DefaultTableModel();                        
                        Set<Character> all = new HashSet<>();
                        Set<Character> set = new HashSet<>();                        
                        set.addAll(fd123);
                        set.addAll(fd1234);
                        for(int j=65;j<(65+z);j++)
                            all.add((char)j);
                        all.removeAll(set);
                        System.out.println(all);                                                        
                        int zs=jTable2.getModel().getRowCount();
                        Object[][] row = new Object[zs][set.size()];                        
                        int cnt=0;
                        int[] all1 = new int[set.size()];
                        Object[] hello= new Object[set.size()];
                        for(Character ch:set){                        
                            hello[cnt]=ch+"";
                            all1[cnt]=ch - 65;
                            System.out.println(all1[cnt++]);
                        }
                        
                        for(int j=0;j<model.getRowCount();j++)
                        {
                            for(int k=0;k<set.size();k++)
                            {
                                row[j][k]=model.getValueAt(j,all1[k]);
                                System.out.print(row[j][k]+" ");
                            }
                            System.out.println();
                        }                        
                        new_model.setDataVector(row,hello);                        
                        NewJFrame1 nj1 = new NewJFrame1(new_model);
                        nj1.setVisible(true);
                        
                        
                        
                        
                        new_model = new DefaultTableModel();                        
                        System.out.println(fd1234);
                        fd1234.removeAll(fd123);
                        System.out.println(fd1234);
                        all=new HashSet<>();
                        for(int j=65;j<(65+z);j++)
                            all.add((char)j);
                        all.removeAll(fd1234);
                        System.out.println(all);              
                        row = new Object[zs][all.size()];                        
                        cnt=0;
                        all1 = new int[all.size()];
                        hello= new Object[all.size()];
                        for(Character ch:all){                        
                            hello[cnt]=ch+"";
                            all1[cnt]=ch - 65;
                            System.out.println(all1[cnt++]);
                        }                        
                        for(int j=0;j<model.getRowCount();j++)
                        {
                            for(int k=0;k<all.size();k++)
                            {
                                row[j][k]=model.getValueAt(j,all1[k]);
                                System.out.print(row[j][k]+" ");
                            }
                            System.out.println();
                        }                        
                        new_model.setDataVector(row,hello);                        
                        NewJFrame1 nj2 = new NewJFrame1(new_model);
                        nj2.setVisible(true); 
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>        
        
        System.out.println("Opening");
        NewJFrame nj = new NewJFrame();
        nj.setVisible(true);
	
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
